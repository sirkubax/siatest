- debug: msg="{{ generic_vpc }}"

- name: "Find spot computation instnace"
  ec2_remote_facts:
    region: "{{ region }}"
    filters:
      instance-state-name: running
      "tag:spot_computation": True 
  register: ec2_spot
  tags: [ find, create, destroy ]  

- name: "Print spot instances facts"
  debug:
    msg: "{{ ec2_spot }}"
  tags: [ find, create, destroy ]
  when: ec2_spot

 
- name: "Treminate spot instances"
  ec2:
    state: "absent"
    region: "{{ region }}"
    instance_ids: "{{ item.id }}"
    wait: true
  with_items: "{{ ec2_spot.instances }}"
  when: ec2_spot.instances.0.tags.spot_computation == "True"
  tags: [ destroy ] 

- name: Provision instance(s)
  ec2:
      region: "{{ region | default('eu-central-1') }}"
      key_name: "{{ key | default('kuba_aws_west2') }}"
      group: "{{ sg_group | default(generic_vpc.security_groups.name) }}" 
      instance_type: "{{ type | default('t2.medium') }}"
      image: "{{ ami | default('ami-47a23a30') }}"
      vpc_subnet_id: "{{ subnet | default(vpc.subnets[0].id) }}"
      wait: yes
      spot_wait_timeout: 600
      spot_price: 1
      exact_count: "{{ count | default(1) }}"
      source_dest_check: "{{ source_dest_check | default(True) }}"
      count_tag:
          role: "{{ host_role | default('spot') }}"
          instance_tag: "{{ generic_vpc.ec2_eip.instance_A.tag }}"
      instance_tags:
          Name: "{{ generic_vpc.ec2_eip.instance_A.name }}" 
          state_tag: initial
          instance_tag: "{{ generic_vpc.ec2_eip.instance_A.tag }}"
          instance_group: "{{ generic_vpc.instance_group }}"
          counter: spot-{{env_name}}
          allow_change: True
          location: "{{ location |default('frankfurt') }}"
          role: "{{ host_role | default('spot') }}"
          spot_computation: True
      volumes:
          - device_name: /dev/sda1
            device_type: gp2
            volume_size: "{{ disk | default(15) }}"
            delete_on_termination: "{{ delete_disk | default(True) }}"
          - device_name: /dev/sdb
            device_type: gp2
            volume_size: "{{ diskB | default(0) }}"
            delete_on_termination: "{{ delete_disk | default(True) }}"
            #iops: 50
      assign_public_ip: Yes
  register: ec2
  when: "{{ ec2_spot.instances|length }} == 0"
  tags: [ create ] 

- name: Check if we did create a new instance 
  debug: msg="NO NEW INSTANCE CREATED"
  when: "{{ ec2.instances | length }} == 0 "

- name: NEW INSTANCES (ec2.instances)
  local_action: debug var={{ item }}  
  with_items: ec2.instances

- name: PRESENT BEFORE instances (ec2.tagged_instances)
  local_action: debug var={{ item }}  
  with_items: ec2.tagged_instances

- name: Assign Elastic IP to instance A (ec2.tagged_instances[0].id)
  ec2_eip:
    region: "{{ region | default('eu-central-1') }}"
    ip: "{{ generic_vpc.ec2_eip.instance_A.ip }}"
    instance_id: "{{ ec2.tagged_instances[0].id }}"

- name: List instance A tags
  ec2_tag:
    region: "{{ region | default('eu-central-1') }}"
    resource: "{{ ec2.tagged_instances[0].id }}"
    state: list
  register: tmp_tags

- debug: msg="{{ tmp_tags }}"
